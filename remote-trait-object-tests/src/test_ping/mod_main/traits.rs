// Copyright 2020 Kodebox, Inc.
// This file is part of CodeChain.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use remote_trait_object::{Dispatch, MethodId, Packet, Port, Service};
use std::sync::Weak;

pub trait Main: Service {
    fn start(&self) -> String;
}

/// TODO: All below things will be generated by the macro

pub struct MainRemote {
    port: Weak<dyn Port>,
}

impl Service for MainRemote {}

impl Main for MainRemote {
    fn start(&self) -> String {
        let packet = Packet::new_request("Singleton".to_string(), 1, &[]);
        let response = self.port.upgrade().unwrap().call(packet.view());
        String::from_utf8(response.data().to_vec()).unwrap()
    }
}

pub struct MainHandler {
    object: Box<dyn Main>,
}

impl MainHandler {
    pub fn new(object: Box<dyn Main>) -> Self {
        Self {
            object,
        }
    }
}

impl Dispatch for MainHandler {
    fn dispatch_and_call(&self, method: MethodId, args: &[u8]) -> Vec<u8> {
        trace!("Main received {}({:?}) request", method, args);
        if method == 1 {
            self.object.start().as_bytes().to_vec()
        } else {
            panic!("Dispatch failed: {}({:?})", method, args)
        }
    }
}
